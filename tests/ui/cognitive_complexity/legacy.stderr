error: use of deprecated item 'try': use the `?` operator instead
  --> $DIR/legacy.rs:225:13
   |
LL |     let _ = try!(Ok(42));
   |             ^^^
   |
   = note: `-D deprecated` implied by `-D warnings`

error: use of deprecated item 'try': use the `?` operator instead
  --> $DIR/legacy.rs:226:13
   |
LL |     let _ = try!(Ok(43));
   |             ^^^

error: use of deprecated item 'try': use the `?` operator instead
  --> $DIR/legacy.rs:227:13
   |
LL |     let _ = try!(Ok(44));
   |             ^^^

error: use of deprecated item 'try': use the `?` operator instead
  --> $DIR/legacy.rs:228:13
   |
LL |     let _ = try!(Ok(45));
   |             ^^^

error: use of deprecated item 'try': use the `?` operator instead
  --> $DIR/legacy.rs:229:13
   |
LL |     let _ = try!(Ok(46));
   |             ^^^

error: use of deprecated item 'try': use the `?` operator instead
  --> $DIR/legacy.rs:230:13
   |
LL |     let _ = try!(Ok(47));
   |             ^^^

error: use of deprecated item 'try': use the `?` operator instead
  --> $DIR/legacy.rs:231:13
   |
LL |     let _ = try!(Ok(48));
   |             ^^^

error: use of deprecated item 'try': use the `?` operator instead
  --> $DIR/legacy.rs:232:13
   |
LL |     let _ = try!(Ok(49));
   |             ^^^

error: the function has a cognitive complexity of 180
  --> $DIR/legacy.rs:12:1
   |
LL | / fn kaboom() {
LL | |     let n = 0;
LL | |     'a: for i in 0..20 {
LL | |         'b: for j in i..20 {
...  |
LL | |     }
LL | | }
   | |_^
   |
   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 770
  --> $DIR/legacy.rs:33:1
   |
LL | / fn bloo() {
LL | |     match 42 {
LL | |         0 => println!("hi"),
LL | |         1 => println!("hai"),
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 120
  --> $DIR/legacy.rs:58:1
   |
LL | / fn baa() {
LL | |     let x = || match 99 {
LL | |         0 => 0,
LL | |         1 => 1,
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 90
  --> $DIR/legacy.rs:76:1
   |
LL | / fn bar() {
LL | |     match 99 {
LL | |         0 => println!("hi"),
LL | |         _ => println!("bye"),
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 170
  --> $DIR/legacy.rs:84:1
   |
LL | / fn barr() {
LL | |     match 99 {
LL | |         0 => println!("hi"),
LL | |         1 => println!("bla"),
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 340
  --> $DIR/legacy.rs:94:1
   |
LL | / fn barr2() {
LL | |     match 99 {
LL | |         0 => println!("hi"),
LL | |         1 => println!("bla"),
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 140
  --> $DIR/legacy.rs:110:1
   |
LL | / fn barrr() {
LL | |     match 99 {
LL | |         0 => println!("hi"),
LL | |         1 => panic!("bla"),
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 280
  --> $DIR/legacy.rs:120:1
   |
LL | / fn barrr2() {
LL | |     match 99 {
LL | |         0 => println!("hi"),
LL | |         1 => panic!("bla"),
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 140
  --> $DIR/legacy.rs:136:1
   |
LL | / fn barrrr() {
LL | |     match 99 {
LL | |         0 => println!("hi"),
LL | |         1 => println!("bla"),
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 280
  --> $DIR/legacy.rs:146:1
   |
LL | / fn barrrr2() {
LL | |     match 99 {
LL | |         0 => println!("hi"),
LL | |         1 => println!("bla"),
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 100
  --> $DIR/legacy.rs:162:1
   |
LL | / fn cake() {
LL | |     if 4 == 5 {
LL | |         println!("yea");
LL | |     } else {
...  |
LL | |     println!("whee");
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 270
  --> $DIR/legacy.rs:172:1
   |
LL | / pub fn read_file(input_path: &str) -> String {
LL | |     use std::fs::File;
LL | |     use std::io::{Read, Write};
LL | |     use std::path::Path;
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 20
  --> $DIR/legacy.rs:203:1
   |
LL | / fn void(void: Void) {
LL | |     if true {
LL | |         match void {}
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 20
  --> $DIR/legacy.rs:210:1
   |
LL | / fn mcarton_sees_all() {
LL | |     panic!("meh");
LL | |     panic!("mÃ¶h");
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 30
  --> $DIR/legacy.rs:216:1
   |
LL | / fn try() -> Result<i32, &'static str> {
LL | |     match 5 {
LL | |         5 => Ok(5),
LL | |         _ => return Err("bla"),
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 350
  --> $DIR/legacy.rs:224:1
   |
LL | / fn try_again() -> Result<i32, &'static str> {
LL | |     let _ = try!(Ok(42));
LL | |     let _ = try!(Ok(43));
LL | |     let _ = try!(Ok(44));
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 90
  --> $DIR/legacy.rs:240:1
   |
LL | / fn early() -> Result<i32, &'static str> {
LL | |     return Ok(5);
LL | |     return Ok(5);
LL | |     return Ok(5);
...  |
LL | |     return Ok(5);
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 130
  --> $DIR/legacy.rs:254:1
   |
LL | / fn early_ret() -> i32 {
LL | |     let a = if true { 42 } else { return 0; };
LL | |     let a = if a < 99 { 42 } else { return 0; };
LL | |     let a = if a < 99 { 42 } else { return 0; };
...  |
LL | |     }
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 30
  --> $DIR/legacy.rs:274:1
   |
LL | / fn osscilating_logical_chain_1() -> bool {
LL | |     true && false || true && false
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 30
  --> $DIR/legacy.rs:281:1
   |
LL | / fn osscilating_logical_chain_2() -> bool {
LL | |     true && false && true && false || true && false && true && false
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: the function has a cognitive complexity of 30
  --> $DIR/legacy.rs:286:1
   |
LL | / fn osscilating_logical_chain_3() -> bool {
LL | |     (true && false) || (true && false)
LL | | }
   | |_^
   |
   = help: you could split it up into multiple smaller functions

error: aborting due to 29 previous errors

